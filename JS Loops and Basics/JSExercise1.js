
//Question 1: Write some code to print out all the numbers from 1 to 10
for (let i = 1; i <11; i++) {
    console.log(i);
}


//Question 2: Write some code that prints out only the even numbers between 1 and 10
var num = 2;
for (let i = 1; i <11; i++) {
    if (i%num == 0) {
        console.log(i);
    }
}

//Question 3: Write some code that prints out only the even numbers between 1 and 1000
var num = 2;
for (let i = 1; i <1001; i++) {
    if (i%num == 0) {
        console.log(i);
    }
}

//Question 4: The opposite of a number is the number itself with its sign reversed. For example, the opposite of 1 is -1. The opposite of -6 is 6. Write some code that takes a numerical value and prints out the opposite of that number.
var invNum = 10;
invNum = invNum *-1;
console.log(invNum);

//Question 5: Write some code that prints out the numbers between 1 and 1000, but if the number is divisible by 3 it prints ‘fizz’, if the number is divisible by 5 it prints ‘buzz’ and if the number is divisible by 3 and 5 it prints ‘fizzbuzz’
for (let j = 1; j < 1001; j++) {
    k = j%5;
    l = j%3;
    console.log(j)
    if (k == 0 && l==0) {
        console.log("fizzbuzz");
    } 
    else if (k == 0) {
        console.log("buzz");
    } 
    else if (l == 0) {
        console.log("fizz");
    }
}

//Question 6: A square number is the product of a number multiplied by itself. Write some code that takes a numerical value and prints out all the square numbers below that value.

var numA = 356; //assuming the numerical value
for (let o = 1; o < numA; o++) {
    var squareNum = o*o;
    if (squareNum < numA) {
        console.log(squareNum);
    }
    
}
//Question 7: The Fibonacci sequence starts with the values 1, 2. The next number in the sequence is generated by summing the previous 2 values, so the first 5 numbers in the sequence are: 1, 2, 3, 5, 8, …
    //Write some code to generate the first 100 values in the Fibonacci sequence
    var firstNum = 0;
    var secondNum = 1;
    var fibNum = 0;

    for (let count = 1 ;count < 101; count++){
        fibNum = firstNum + secondNum;
        console.log(fibNum);

        firstNum = secondNum;
        secondNum = fibNum;
        
}
    //Write some code to add up only the even values in the first 1000 values of the Fibonacci sequence
    var addition = 0;
    for (let count2 = 1; count2 < 1001; count2++){
        fibNum = firstNum + secondNum;
        console.log(fibNum);

        firstNum = secondNum;
        secondNum = fibNum;
        if (fibNum%2 ==0) {
            addition = addition + fibNum;
            console.log(addition);
        }
        
    }

//Question 8: The sum of digits of a number is found by adding all the digits of a number together. For example, the sum of digits of 234 is 2 + 3 + 4 = 9. Write some code to take a numerical value and print out the sum of digits of that number.

//var number = 234;


// This is a perfectly acceptable solution; a "for" loop isn't ideal, but we've not seen "while" yet in the module, so let's find a way to make "for" work:
let userInput = 234;        // The exercise doesn't say explicitly that user input is needed, but let's say we already have our number (however it was obtained)

let number = userInput;               // Let's make a new variable, "number", which we can manipulate without changing our original starting value (userInput)
let total = 0;                        // We'll need to keep a running total
for( let i = 0; i < userInput; i++ )  // A "for" loop isn't ideal here. We know that the number of digits is always going to be <= the value itself, so let's loop "userInput" times!
{
  let digit  = number % 10;           // Each digit will be the modulus of the current number (e.g. 234 % 10 = 4)
  number = ( number - digit ) / 10;   // The remainder of this process (e.g. 234 - 4 = 230) can now be divided by 10 to access the next digit (e.g. 230 / 10 = 23)

//  console.log( number, digit );       // This can be a useful debugging aid; I used it to print out "number" and "digit" at each step, to see if my code was working as intended

  total += digit;                     // Add the current digit to our total amount

  if( number === 0 )                  // Do we have nothing remaining? If so, we're done, as we've processed all digits in the number
    break;                            //  If we're done, let's quit out of our "for" loop!

}

console.log( total );       // Finally, print out the total


//// This is a far more elegant solution, but uses "while", which we've not yet seen in the module.
////  It also doesn't keep "digit" as a temporary variable: instead, we add its value to "total" directly,
////   and then use the built-in function "Math.floor" to keep only the quotient (and discard the remainder)
//let number = 234;           // The exercise doesn't say explicitly that user input is needed, but let's say we already have our number (however it was obtained)
//
//let total = 0;                        // We'll need to keep a running total
//while( number != 0 )                  // Keep working on our number as long as it is _not_ equal to zero
//{
//  total += number % 10;               // Each digit will be the modulus of the current number (e.g. 234 % 10 = 4), so add this to our total
//  number = Math.floor( number / 10 ); // The number can now be divided by 10, discarding the remainder, to access the next digit (e.g. floor( 234 / 10 ) = floor( 23.4 ) = 23)
//}
//
//console.log( total );       // Finally, print out the total

    
